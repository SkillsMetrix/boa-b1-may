
from pydantic import BaseModel

class UserPost(BaseModel):
    title:str
    content:str

--------
from fastapi import Body,FastAPI,HTTPException,status
from random import randrange
from schemas import UserPost
app= FastAPI()

user_post=[]

@app.get("/loadall")
def loadData():
    return {"message":user_post}

@app.post("/createpost")
def createPost(newPost:UserPost):
    data=newPost.model_dump()
    data['id']=randrange(0,10000)
    user_post.append(data)

    return {"message":data}

# reusable func
def findPost(id):
    for i,p in enumerate(user_post):
        if p['id'] == id:
            print(p)
            return i

@app.get("/loadpost/{id}")
def findPostById(id:int):
    findData=findPost(id)
    if findData ==None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="User not Found")
    print(findData)
    return {"data": findData}


@app.delete("/deletepost/{id}")
def deletePostById(id:int):
    findData=findPost(id)
    if findData ==None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="User not Found")
    user_post.pop(findData)
    return {"data": "user deleted"}


@app.put("/updatepost/{id}")
def deletePostById(id:int,post:UserPost):
    findData=findPost(id)
    if findData ==None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="User not Found")
    data=post.model_dump()
    data['id']=id
    user_post[findData]=post
    
    return {"data": "user updated"}
